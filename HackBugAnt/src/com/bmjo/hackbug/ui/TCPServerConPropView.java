/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bmjo.hackbug.ui;

import com.bmjo.hackbug.core.CommonDataArea;

import com.bmjo.hackbug.serial.SerialPortConection;
import com.fazecast.jSerialComm.SerialPort;
import static javax.swing.JOptionPane.showMessageDialog;
import com.bmjo.hackbug.core.IConnection;
import com.bmjo.hackbug.core.IConnectionEvents;
import com.bmjo.hackbug.core.MainControler;
import com.bmjo.hackbug.core.MainControler.ConEvents;
import com.bmjo.hackbug.core.MainControler.ConnectionMode;
import com.bmjo.hackbug.tcpserver.TcpConnectionContext;
import com.bmjo.hackbug.tcpserver.TcpServer;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;



/**
 *
 * @author bijum
 */
public class TCPServerConPropView extends javax.swing.JPanel {

    ConnectionMode mode;
    
    /**
     * Creates new form SerialPortConPropSel
     */
    public TCPServerConPropView() {
        initComponents();     
        mode = ConnectionMode.TCPServer;
         CommonDataArea.selectedCon = new ArrayList<String>();
        jList1.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                CommonDataArea.selectedCon = (ArrayList)jList1.getSelectedValuesList();
                
            }
        });
        MainControler.AddConEventListner(new ConnectionEventss());
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Port");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 153, 31));

        jTextField2.setText("80");
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 96, -1));

        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 153, 207));

        jLabel3.setText("Connections");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
        if(jButton1.getText()=="Start"){    
            if(CommonDataArea.connection==null) 
            {
                CommonDataArea.connection = new  TcpServer();
            }else {
                 CommonDataArea.connection.close();
                 CommonDataArea.connection = new  TcpServer();
            }
               
            TcpServer.ConParams params = new TcpServer.ConParams();
            params.port = Integer.parseInt(jTextField2.getText());
          
            if(CommonDataArea.connection.connect(params)){
               
                Vector<String> v= new Vector<String>();
               // v.add("Start");
                CommonDataArea.conInfoList=v;
                //jList1.setPreferredSize(new Dimension(200,200));
                //jList1.setListData(v);
                
                jButton1.setText("Stop");
            }
            
        }else if(jButton1.getText()=="Stop"){
            if(CommonDataArea.connection!=null){
                CommonDataArea.connection.close();
            }
             jButton1.setText("Start");
        }
        }catch(Exception exp){
            showMessageDialog(this, "Connection Failed");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

   
    class ConnectionEventss implements IConnectionEvents{


        @Override
        public void onConnectionModeChange(ConnectionMode mode) {
            }

        @Override
        public void onEvent(MainControler.ConEvents event, Object param, Object source) {
          if(source instanceof TcpConnectionContext){
            if(event == ConEvents.Connected){
             
                  TcpConnectionContext conCon = (TcpConnectionContext)source;
                  String test = conCon.getConnectionName();
                CommonDataArea.conInfoList.add(test);
                //CommonDataArea.conInfoList.add("test4");
                  
                 // CommonDataArea.conInfoList.addElement(conCon.getConnectionName());
             
                 jList1.setListData(CommonDataArea.conInfoList);
                 jList1.validate();
                 
              }
            else if(event == ConEvents.ConClosed){
                 TcpConnectionContext conCon = (TcpConnectionContext)source;
                  //CommonDataArea.conInfoList.removeElement(conCon.getConnectionName());
                  //jList1.setModel(CommonDataArea.conInfoList);
                  
                  CommonDataArea.conInfoList.remove(conCon.getConnectionName());
                  jList1.setListData(CommonDataArea.conInfoList);
                   jList1.validate();
            }       
          }
        }

        @Override
        public void onError(MainControler.Error error, Object details) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void onReceive(byte[] data, int numBytes, IConnection eventSource, Object eventInfo) {
             return; 
        }

        @Override
        public void onSelectedConChange(IConnection connection) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
